<?xml version="1.0" encoding="UTF-8" ?>

<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods.xsd">

	<simple-method method-name="uploadedFileSimple" short-description="uploadedFileSimple">

		<log level="info" message="parameters============${parameters}"></log>
		<set field="imagePath" value="" />
        <!-- 处理图片 -->
		<if-not-empty field="parameters._mediumFile_fileName">
			<!--上传图片所传过来的参数 -->
			<set field="uploadedFileParam.uploadedFile" from-field="parameters.mediumFile" />
			<set field="uploadedFileParam._uploadedFile_fileName" from-field="parameters._mediumFile_fileName" />
			<set field="uploadedFileParam.mediumFileBase64" from-field="parameters.mediumFileBase64" />
			<call-service service-name="uploadedFile" in-map-name="uploadedFileParam">
				<result-to-field result-name="imagePath" />
			</call-service>
			<set field="imagePath" from-field="imagePath"/>
		</if-not-empty>

		<field-to-result field="imagePath" />
	</simple-method>
    
    
  <simple-method method-name="createQzCustomer"  short-description="createQzCustomer">
		<log level="info" message="parameters:${parameters}"></log>

		<now-timestamp field="nowTimestamp" />
		<now-date-to-env field="nowDate"/>
		<!--创建单位 -->
		<entity-condition list="companyList" entity-name="QzCompany">
			<condition-list>
				<condition-expr field-name="companyName" operator="like" value="%${parameters.companyName}%"/>
			</condition-list>
		</entity-condition>
		<set field="companyId"/>
		<if-empty field="companyList">
			<make-value value-field="company" entity-name="QzCompany" />
			<sequenced-id sequence-name="QzCompany" field="companyId" />
			<set field="company.companyId" from-field="companyId" />
			<set field="company.companyName" from-field="parameters.companyName" />
			<create-value value-field="company" />
		<else>
			<first-from-list entry="company" list="companyList"/>
			<set field="companyId" from-field="company.companyId"/>
		</else>
		</if-empty>
		<!-- 创建基本信息 -->
		<set field="createPersonParam.firstName" from-field="parameters.firstName" />
		<set field="createPersonParam.gender" from-field="parameters.gender"/>
		<set field="createPersonParam.telephone" from-field="parameters.telephone"/>
		<set field="createPersonParam.cardId" from-field="parameters.cardId"/>
		<set field="createPersonParam.companyId" from-field="companyId"/>

		<log message="===========createPersonParam========${createPersonParam}" level="info" />
		<call-service service-name="createPerson" in-map-name="createPersonParam">
			<result-to-field result-name="partyId" />
		</call-service>
    <check-errors/>
		<field-to-result field="partyId" result-name="customerId" />
		<entity-one value-field="user" entity-name="UserLogin">
			<field-map field-name="userLoginId" value="system"/>
		</entity-one>

		<!-- 创建登录帐号 -->
		<set field="createUserLoginParam.partyId" from-field="partyId"/>
		<set field="createUserLoginParam.userLoginId" from-field="parameters.userLoginId"/>
		<set field="createUserLoginParam.currentPassword" from-field="parameters.currentPassword" default-value="000000"/>
		<set field="createUserLoginParam.currentPasswordVerify" from-field="parameters.currentPasswordVerify" default-value="000000"/>
		<set field="createUserLoginParam.enabled" from-field="parameters.enabled" default-value="Y"/>
		<set field="createUserLoginParam.userLogin" from-field="user"/>
		<log level="info" message="parameters.enabled===========${parameters.enabled}"/>
		<call-service service-name="createUserLogin" in-map-name="createUserLoginParam">
		</call-service>
    <check-errors/>
	</simple-method>
	
	<simple-method method-name="updateQzCustomer"  short-description="updateQzCustomer">
		<log level="info" message="parameters:${parameters}"></log>

		<!--创建单位 -->
		<entity-condition list="companyList" entity-name="QzCompany">
			<condition-list>
				<condition-expr field-name="companyName" operator="like" value="%${parameters.companyName}%"/>
			</condition-list>
		</entity-condition>
		<set field="companyId"/>
		<if-empty field="companyList">
			<make-value value-field="company" entity-name="QzCompany" />
			<sequenced-id sequence-name="QzCompany" field="companyId" />
			<set field="company.companyId" from-field="companyId" />
			<set field="company.companyName" from-field="parameters.companyName" />
			<create-value value-field="company" />
		<else>
			<first-from-list entry="company" list="companyList"/>
			<set field="companyId" from-field="company.companyId"/>
		</else>
		</if-empty>
		<!-- 员工基本信息 -->
		<entity-one value-field="person" entity-name="Person">
            <field-map field-name="partyId" from-field="parameters.partyId"/>
        </entity-one>
        <set field="oldCardId" from-field="person.cardId"/>
        <set field="newCardId" from-field="parameters.cardId"/>
		<set-nonpk-fields value-field="person" map="parameters"/>
		<set field="person.companyId" from-field="companyId"/>		
		<store-value value-field="person"/>
		<log message="============partyId========${partyId}" level="info" />
		<!-- 更改原计步器信息-->
		<entity-and list="customerLogList" entity-name="QzCustomerLog">
			<field-map field-name="cardId" from-field="oldCardId"/>
		</entity-and>
		<iterate entry="customerLog" list="customerLogList">
			<set field="customerLog.cardId" from-field="newCardId"/>
		</iterate>
		<store-list list="customerLogList"/>
	</simple-method>
	
	<simple-method method-name="checkUserLoginId"  short-description="checkUserLoginId">
		<log level="info" message="parameters:${parameters}"></log>
		<entity-one value-field="userLogin" entity-name="UserLogin">
			<field-map field-name="userLoginId" from-field="parameters.userLoginId"/>
		</entity-one>	
		<set field="isExist" default-value="N"/>
		<if-not-empty field="userLogin">
			<set field="isExist" value="Y"/>
		</if-not-empty>
		<field-to-result field="isExist" />
	</simple-method>
	
	<simple-method method-name="checkCardId"  short-description="checkCardId">
		<log level="info" message="parameters:${parameters}"></log>
		<entity-and list="personList" entity-name="Person">
			<field-map field-name="cardId" from-field="parameters.cardId"/>
		</entity-and>
		<set field="isExist" default-value="N"/>
		<if-not-empty field="personList">
			<set field="isExist" value="Y"/>
		</if-not-empty>
		<field-to-result field="isExist" />
	</simple-method>
	
	<simple-method method-name="createCompanyAndDept"  short-description="createCompanyAndDept">
		<log level="info" message="parameters:${parameters}"></log>
		<!--创建单位 -->
		<entity-condition list="companyList" entity-name="QzCompany">
			<condition-list>
				<condition-expr field-name="companyName" operator="like" value="%${parameters.companyName}%"/>
			</condition-list>
		</entity-condition>
		<set field="companyId"/>
		<if-empty field="companyList">
			<make-value value-field="company" entity-name="QzCompany" />
			<sequenced-id sequence-name="QzCompany" field="companyId" />
			<set field="company.companyId" from-field="companyId" />
			<set field="company.companyName" from-field="parameters.companyName" />
			<create-value value-field="company" />
			<set field="companyId" from-field="companyId"/>
		<else>
			<first-from-list entry="company" list="companyList"/>
			<set field="companyId" from-field="company.companyId"/>
		</else>
		</if-empty>
		<!--创建团队-->
		<entity-condition list="deptList" entity-name="QzDept">
			<condition-list>
				<condition-expr field-name="deptName" operator="like" value="%${parameters.deptName}%"/>
				<condition-expr field-name="companyId" operator="equals" from-field="companyId"/>
			</condition-list>
		</entity-condition>
		<set field="deptId"/>
		<if-empty field="deptList">
			<make-value value-field="dept" entity-name="QzDept" />
			<sequenced-id sequence-name="QzDept" field="deptId" />
			<set field="dept.deptId" from-field="deptId" />
			<set field="dept.companyId" from-field="companyId" />
			<set field="dept.deptName" from-field="parameters.deptName" />
			<create-value value-field="dept" />
			<set field="deptId" from-field="deptId"/>
		<else>
			<first-from-list entry="dept" list="deptList"/>
			<set field="deptId" from-field="dept.deptId"/>
		</else>
		</if-empty>
		<field-to-result field="deptId" />
		
	</simple-method>
	
	<simple-method method-name="createRelationShip"  short-description="createRelationShip">
		<log level="info" message="parameters:${parameters}"></log>
		<!--团队跟赛事关联 -->
		<entity-and list="qzCompetiAndDeptList" entity-name="QzCompetiAndDept">
			<field-map field-name="cId" from-field="parameters.cId"/>
			<field-map field-name="deptId" from-field="parameters.deptId"/>
		</entity-and>
		<if-empty field="qzCompetiAndDeptList">
			<make-value value-field="competiAndDept" entity-name="QzCompetiAndDept" />
			<set field="competiAndDept.cId" from-field="parameters.cId" />
			<set field="competiAndDept.deptId" from-field="parameters.deptId" />
			<create-value value-field="competiAndDept" />
		</if-empty>
		<!--查询团队中的人 -->
		<entity-and list="qzDeptAndCustomerList" entity-name="QzDeptAndCustomer">
			<field-map field-name="deptId" from-field="parameters.deptId"/>
		</entity-and>
		<iterate entry="deptAndCustomer" list="qzDeptAndCustomerList">
			<!--赛事跟人关联 -->
			<entity-and list="qzCompetiAndCustomerList" entity-name="QzCompetiAndCustomer">
				<field-map field-name="cId" from-field="parameters.cId"/>
				<field-map field-name="customerId" from-field="deptAndCustomer.customerId"/>
			</entity-and>
			<if-empty field="qzCompetiAndCustomerList">
				<make-value value-field="competiAndCustomer" entity-name="QzCompetiAndCustomer" />
				<set field="competiAndCustomer.cId" from-field="parameters.cId" />
				<set field="competiAndCustomer.customerId" from-field="deptAndCustomer.customerId" />
				<create-value value-field="competiAndCustomer" />
			</if-empty>
		</iterate>
	</simple-method>
	
	<!-- 	创建达人秀 -->
	<simple-method method-name="createTalentShow"  short-description="createTalentShow">
		<log level="info" message="parameters:${parameters}"></log>
		<make-value value-field="talentShow" entity-name="QzTalentShow" />
		<sequenced-id sequence-name="QzTalentShow" field="showId"/>
		<!--上传图片 -->
		<set field="inMap.mediumFile" from-field="parameters.mediumFile"/>
		<set field="inMap._mediumFile_fileName" from-field="parameters._mediumFile_fileName"/>
		<set field="inMap.mediumFileBase64" from-field="parameters.mediumFileBase64"/>
		<set field="inMap.userLogin" from-field="userLogin"/>
		<call-service service-name="uploadedFileSimple" in-map-name="inMap">
			<result-to-field result-name="imagePath"/>
		</call-service>
		<set field="talentShow.showId" from-field="showId" />
		<set field="talentShow.showPic" from-field="imagePath" />
		<set-nonpk-fields value-field="talentShow" map="parameters"/>
		<create-value value-field="talentShow" />
	</simple-method>
	<!-- 	修改达人秀 -->
	<simple-method method-name="updateTalentShow"  short-description="updateTalentShow">
		<log level="info" message="parameters:${parameters}"></log>
		<!--上传图片 -->
		<set field="inMap.mediumFile" from-field="parameters.mediumFile"/>
		<set field="inMap._mediumFile_fileName" from-field="parameters._mediumFile_fileName"/>
		<set field="inMap.mediumFileBase64" from-field="parameters.mediumFileBase64"/>
		<set field="inMap.userLogin" from-field="userLogin"/>
		<call-service service-name="uploadedFileSimple" in-map-name="inMap">
			<result-to-field result-name="imagePath"/>
		</call-service>
		
		<entity-one value-field="talentShow" entity-name="QzTalentShow">
			<field-map field-name="showId" from-field="parameters.showId"/>
		</entity-one>
		<set-nonpk-fields value-field="talentShow" map="parameters"/>
		<log level="info" message="imagePath------{imagePath}"></log>
		<if-not-empty field="imagePath">
			<set field="talentShow.showPic" from-field="imagePath" />
		</if-not-empty>
		<store-value value-field="talentShow"/>
	</simple-method>
	
	<simple-method method-name="reportStat"  short-description="reportStat">
		<log level="info" message="reportStat-parameters:${parameters}"></log>
		<set field="splitChar" value="," type="String"/>
		<set field="resultList" value="${groovy:org.ofbiz.base.util.StringUtil.splitStringToList(parameters.listIds,splitChar)}" type="List"/>
		<now-date-to-env field="nowDate"/>
		<iterate entry="cardId" list="resultList">
			<entity-and list="customerList" entity-name="QzCustomer">
				<field-map field-name="cardId" from-field="cardId"/>
			</entity-and>
			<first-from-list entry="customer" list="customerList"/>
			<if-not-empty field="customer">
		<!-- 		获取传入起止时间正在参加的赛事 -->
				<entity-condition list="competiAndCustomerList" entity-name="QzCompetiAndCustomerView">
					<condition-list>
						<condition-list combine="or">
							<condition-list combine="and">
								<condition-expr field-name="endDate" operator="greater-equals" from-field="parameters.earlyDate"/>
								<condition-expr field-name="startDate" operator="less-equals" from-field="parameters.earlyDate"/>
							</condition-list>
							<condition-list combine="and">
								<condition-expr field-name="endDate" operator="greater-equals" from-field="parameters.lastDate"/>
								<condition-expr field-name="startDate" operator="less-equals" from-field="parameters.lastDate"/>
							</condition-list>
						</condition-list>
						<condition-expr field-name="customerId" from-field="customer.partyId"/>
						<condition-expr field-name="status" value="1"/><!-- 进行中的赛事 -->
					</condition-list>
				</entity-condition>
				<iterate entry="competiAndCustomer" list="competiAndCustomerList">
						<entity-one value-field="competition" entity-name="QzCompetition">
							<field-map field-name="cId" from-field="competiAndCustomer.cId"/>
						</entity-one>
				<!-- 		获取参与的团队 -->
						<entity-and list="deptAndCustomerList" entity-name="QzDeptAndCustomer">
							<field-map field-name="customerId" from-field="customer.partyId"/>
						</entity-and>
						<iterate entry="deptAndCustomer" list="deptAndCustomerList">
				<!-- 		查询该团队是否参与了这个赛事 -->
							<entity-and list="competiAndDeptList" entity-name="QzCompetiAndDept">
								<field-map field-name="cId" from-field="competiAndCustomer.cId"/>
								<field-map field-name="deptId" from-field="deptAndCustomer.deptId"/>
							</entity-and>	
							<if-not-empty field="competiAndDeptList">
				<!-- 					如果参与了赛事则统计在该团队下的积分 -->
								<set field="totalNumber" type="BigDecimal" default-value="0"/>
								<set field="totalIntegral" type="BigDecimal" default-value="0"/>
								<log level="info" message="customerLogList================获取正在参加的赛事${competition}"></log>
								<if-not-empty field="competition">
									<entity-condition list="customerLogList" entity-name="QzCustomerLog">
										<condition-list>
											<condition-expr field-name="cardId" from-field="cardId"/>
											<condition-expr field-name="stepDate" operator="greater-equals" from-field="competition.startDate"/>
											<condition-expr field-name="stepDate" operator="less-equals" from-field="competition.endDate"/>
											<condition-expr field-name="thruDate" operator="equals"/>
										</condition-list>
									</entity-condition>
									<log level="info" message="customerLogList>>>>>>>>>>>>${customerLogList}"></log>
									<iterate entry="customerLog" list="customerLogList">
										<set field="stepNumber" value="0" type="Double"/>
										<set field="stepNumber" from-field="customerLog.stepNumber" type="BigDecimal"/>
										<set field="totalNumber" value="${groovy: totalNumber + stepNumber}" type="BigDecimal"/>
										
										<set field="minStep" from-field="competition.minStep" type="Double"/>
										<set field="maxStep" from-field="competition.maxStep" type="Double"/>
										<set field="stepCoefficient" from-field="competition.stepCoefficient" type="BigDecimal"/>
										
										<set field="integral" value="0" type="BigDecimal"/>
										<if-compare-field operator="greater-equals" field="stepNumber" to-field="minStep" type="Double">
											<if-compare-field operator="less" field="stepNumber" to-field="maxStep" type="Double">
<!-- 												<set field="integral" value="${groovy: (stepNumber / (stepCoefficient * 100)) }" type="Double"/> -->
												<set field="integral" value="${groovy: new BigDecimal((stepNumber / (stepCoefficient * 100))).setScale(0,BigDecimal.ROUND_HALF_UP)}" type="Double"/>
											</if-compare-field>
											<if-compare-field operator="greater-equals" field="stepNumber" to-field="maxStep" type="Double">
<!-- 												<set field="integral" value="${groovy: (maxStep / (stepCoefficient * 100)) }"  type="Double"/> -->
												<set field="integral" value="${groovy: new BigDecimal((maxStep / (stepCoefficient * 100))).setScale(0,BigDecimal.ROUND_HALF_UP)}" type="Double"/>
											</if-compare-field>
										</if-compare-field>
										<log level="info" message="integral>>>${integral}"></log>
										<set field="totalIntegral" value="${groovy: totalIntegral + integral}"/>
												
									</iterate>
								</if-not-empty>
								
								<entity-and list="statisticsList" entity-name="QzStatistics">
									<field-map field-name="customerId" from-field="customer.partyId"/>
									<field-map field-name="deptId" from-field="deptAndCustomer.deptId"/> 
									<field-map field-name="cId" from-field="competition.cId"/>
								</entity-and>
								<if-not-empty field="statisticsList">
									<first-from-list entry="statistics" list="statisticsList"/>
									<if-not-empty field="statistics">
										<set field="statistics.stepNumber" from-field="totalNumber" type="Long"/>
										<set field="statistics.integral" from-field="totalIntegral" type="Long"/>
										<store-value value-field="statistics"/>
									</if-not-empty>			
								<else>
									<make-value value-field="statistics" entity-name="QzStatistics"/>
									<sequenced-id sequence-name="QzStatistics" field="statId"/>
									<set field="statistics.statId" from-field="statId"/>
									<set field="statistics.customerId" from-field="customer.partyId"/>
									<set field="statistics.deptId" from-field="deptAndCustomer.deptId"/>
									<set field="statistics.cId" from-field="competition.cId"/>
									<set field="statistics.stepNumber" from-field="totalNumber" type="Long"/>
									<set field="statistics.integral" from-field="totalIntegral" type="Long"/>
									<create-value value-field="statistics"/>
								</else>
								</if-not-empty>
								<set field="inMap.cId" from-field="competition.cId"/>
								<call-service service-name="reOrder" in-map-name="inMap"></call-service>
							</if-not-empty>
						</iterate>
				</iterate>
			</if-not-empty>
			
		</iterate>
		
		<set field="totalInMap.listIds" from-field="parameters.listIds"/>
		<set field="totalInMap.earlyDate" from-field="parameters.earlyDate"/>
		<set field="totalInMap.lastDate" from-field="parameters.lastDate"/>
		<call-service service-name="reportStatTotal" in-map-name="totalInMap"></call-service>
	</simple-method>
	
<!-- 	重新排序 -->
	<simple-method method-name="reOrder" short-description="reOrder">
		<log level="info" message="parameters:${parameters}"></log>
		<entity-and list="statisticsList" entity-name="QzStatistics">
			<field-map field-name="cId" from-field="parameters.cId"/>
			<order-by field-name="-integral"/>
		</entity-and>
		<set field="count" type="Long" value="0" />
		<iterate entry="statistics" list="statisticsList">
			<set field="count" type="Long" value="${count+1}" />
			<set field="statistics.ranking" from-field="count" type="Long"/>
			<store-value value-field="statistics"/>
		</iterate>
	</simple-method>
	
	<simple-method method-name="createQzCustomerLogService" short-description="createQzCustomerLogService">
		<log level="info" message="parameters:${parameters}"></log>
		<set field="startDate" from-field="parameters.startDate" type="Date"/>
		<set field="endDate" from-field="parameters.endDate" type="Date"/>
		<set field="stepNumber" from-field="parameters.stepNumber" type="BigDecimal"/>
		<set field="stepAvg" from-field="parameters.stepAvg" type="BigDecimal"/>
		<set field="resultList" value="${groovy:org.ofbiz.base.util.UtilDateTime.getDateList(startDate,endDate)}" type="List"/>
		<iterate entry="result" list="resultList" >
			<if-not-empty field="stepAvg">
				<set field="stepNumber" value="${groovy:stepNumber + stepAvg }" />
			</if-not-empty>
			<set field="stepDate" from-field="result" type="Date"/>
			<now-timestamp field="nowTimestamp" />
			<entity-condition list="customerLogList" entity-name="QzCustomerLog">
				<condition-list>
					<condition-expr field-name="cardId" from-field="parameters.cardId"/>
					<condition-expr field-name="stepDate" from-field="stepDate"/>
				</condition-list>
			</entity-condition>
			<first-from-list entry="customerLog" list="customerLogList"/>
			<log level="info" message="customerLog>>>>>>>${customerLog}"></log>
			<if-not-empty field="customerLog">
				<set field="customerLog.stepNumber" from-field="stepNumber" type="Long"/>
				<set field="customerLog.uploadDate" from-field="nowTimestamp"/>
				<store-value value-field="customerLog"/>
			<else>
			    <make-value value-field="customerLog" entity-name="QzCustomerLog"/>
				<sequenced-id sequence-name="QzCustomerLog" field="logId"/>
				<set field="customerLog.logId" from-field="logId"/>
				<set-nonpk-fields value-field="customerLog" map="parameters"/>
				<set field="customerLog.stepNumber" from-field="stepNumber" type="Long"/>
				<set field="customerLog.uploadDate" from-field="nowTimestamp"/>
				<set field="customerLog.stepDate" from-field="stepDate"/>
				<create-value value-field="customerLog"/>
			</else>
			</if-not-empty>
		</iterate>
		
		<field-to-result field="parameters.startDate" result-name="earlyDate"  />
		<field-to-result field="parameters.endDate" result-name="lastDate"  />
		<field-to-result field="parameters.cardId" result-name="listIds" />
	</simple-method>
	
	<simple-method method-name="reportStatTotal"  short-description="reportStatTotal">
		<log level="info" message="parameters:${parameters}"></log>
		<set field="splitChar" value="," type="String"/>
		<set field="resultList" value="${groovy:org.ofbiz.base.util.StringUtil.splitStringToList(parameters.listIds,splitChar)}" type="List"/>
		<now-date-to-env field="nowDate"/>
		<iterate entry="cardId" list="resultList">
			<entity-and list="customerList" entity-name="QzCustomer">
				<field-map field-name="cardId" from-field="cardId"/>
			</entity-and>
			<first-from-list entry="customer" list="customerList"/>
			<log level="info" message="cardId>>>>>>>>>>>${cardId}"></log>
			<log level="info" message="customerList>>>>>>>>>>>${customerList}"></log>
			<set field="totalIntegral" default-value="0" type="BigDecimal"/>
			<set field="totalNumber" default-value="0" type="BigDecimal"/>
			
			<set field="minStep" value="6000" type="BigDecimal"/>
			<set field="maxStep" value="15000" type="BigDecimal"/>
			<set field="stepCoefficient" value="1" type="BigDecimal"/>
			
			<set field="earlyDate" from-field="parameters.earlyDate" type="Date"/>
			<entity-condition list="logList" entity-name="CustomerLogAndCustomer">
				<condition-list>
					<condition-expr field-name="partyId"  operator="equals" from-field="customer.partyId"/>
					<condition-expr field-name="stepDate" operator="less-equals" from-field="nowDate"/>
					<condition-expr field-name="thruDate" operator="equals"/>
				</condition-list>	
			</entity-condition>
			<set field="cIntegral" default-value="0" type="BigDecimal"/>
			<set field="cStempNum" default-value="0" type="BigDecimal"/>
			<iterate entry="logGv" list="logList">
				<set field="integral" default-value="0" type="BigDecimal"/>
				<set field="stepNum" from-field="logGv.stepNumber" type="BigDecimal"/>
				<if-compare-field operator="greater-equals" field="stepNum" to-field="minStep" type="BigDecimal">
					<if-compare-field operator="less" field="stepNum" to-field="maxStep" type="BigDecimal">
<!-- 						<set field="integral" value="${groovy: (stepNum / (stepCoefficient * 100)) }"/> -->
						<set field="integral" value="${groovy: new BigDecimal((stepNum / (stepCoefficient * 100))).setScale(0,BigDecimal.ROUND_HALF_UP)}" type="Double"/>
					</if-compare-field>
					<if-compare-field operator="greater-equals" field="stepNum" to-field="maxStep" type="BigDecimal">
<!-- 						<set field="integral" value="${groovy: (maxStep / (stepCoefficient * 100)) }"/> -->
						<set field="integral" value="${groovy: new BigDecimal((maxStep / (stepCoefficient * 100))).setScale(0,BigDecimal.ROUND_HALF_UP)}" type="Double"/>
					</if-compare-field>
				</if-compare-field>
				<set field="cIntegral" value="${groovy: cIntegral + integral}" type="Integer"/>
				<set field="cStempNum" value="${groovy: cStempNum + stepNum}" type="Integer"/>
			</iterate>
			<set field="totalIntegral" value="${groovy: totalIntegral + cIntegral}"/>
			<set field="totalNumber" value="${groovy: totalNumber + cStempNum}"/>
			
			<entity-and list="statisticsList" entity-name="QzStatisticsTotal">
				<field-map field-name="customerId" from-field="customer.partyId"/>
			</entity-and>
			<if-not-empty field="statisticsList">
				<first-from-list entry="statistics" list="statisticsList"/>
				<if-not-empty field="statistics">
					<set field="statistics.stepNumber" from-field="totalNumber" type="Long"/>
					<set field="statistics.integral" from-field="totalIntegral" type="Long"/>
					<store-value value-field="statistics"/>
				</if-not-empty>			
			<else>
				<make-value value-field="statistics" entity-name="QzStatisticsTotal"/>
				<sequenced-id sequence-name="QzStatisticsTotal" field="statId"/>
				<set field="statistics.statId" from-field="statId"/>
				<set field="statistics.customerId" from-field="customer.partyId"/>
				<set field="statistics.stepNumber" from-field="totalNumber" type="Long"/>
				<set field="statistics.integral" from-field="totalIntegral" type="Long"/>
				<create-value value-field="statistics"/>
			</else>
			</if-not-empty>
			<call-service service-name="reOrderTotal"></call-service>
		</iterate>
	</simple-method>
	
	<!-- 	重新排序 -->
	<simple-method method-name="reOrderTotal" short-description="reOrderTotal">
		<log level="info" message="parameters:${parameters}"></log>
		<entity-condition list="statisticsList" entity-name="QzStatisticsTotal">
			<order-by field-name="-integral"/>
		</entity-condition>
		<set field="count" type="Long" value="0" />
		<iterate entry="statistics" list="statisticsList">
			<set field="count" type="Long" value="${count+1}" />
			<set field="statistics.ranking" from-field="count" type="Long"/>
			<store-value value-field="statistics"/>
		</iterate>
	</simple-method>
	<!-- 	删除团队 -->
	<simple-method method-name="deletCompanyAndDept" short-description="deletCompanyAndDept">
		<log level="info" message="parameters:${parameters}"></log>
		<set field="deptIds" from-field="parameters.deptIds" type="String"/>
		<set field="splitChar" value="," type="String"/>
		<set field="ids" value="${groovy:org.ofbiz.base.util.StringUtil.splitStringToList(deptIds,splitChar)}" type="List"/>
		<log level="info" message="ids===${ids}"></log>
		<iterate entry="deptId" list="ids">
			<entity-one value-field="qzDept" entity-name="QzDept">
				<field-map field-name="deptId" from-field="deptId"/>
			</entity-one>
			<if-not-empty field="qzDept">
				<remove-value value-field="qzDept"/>
			</if-not-empty>
<!-- 			删除团队中的人 -->
			<entity-and list="deptAndCustomerList" entity-name="QzDeptAndCustomer">
				<field-map field-name="deptId" from-field="deptId"/>
			</entity-and>
			<set field="customerIds" type="String"/>
			<iterate entry="deptAndCustomer" list="deptAndCustomerList">
				<if-not-empty field="customerIds">
					<set field="customerIds" value="${groovy: customerIds + ','}"/>
				</if-not-empty>
			</iterate>
			<if-not-empty field="customerIds">
				<set field="deletMap.deptId" from-field="deptId" />
				<set field="deletMap.customerIds" from-field="customerIds"/>
				<call-service service-name="deleteFromDept" in-map-name="deletMap"></call-service>
			</if-not-empty>
		</iterate>
	</simple-method>
	<!-- 	删除团队中的人 -->
	<simple-method method-name="deleteFromDept" short-description="deleteFromDept">
		<log level="info" message="parameters:${parameters}"></log>
		<set field="customerIds" from-field="parameters.customerIds" type="String"/>
		<set field="splitChar" value="," type="String"/>
		<set field="ids" value="${groovy:org.ofbiz.base.util.StringUtil.splitStringToList(customerIds,splitChar)}" type="List"/>
		<log level="info" message="ids===${ids}"></log>
		<iterate entry="customerId" list="ids">
			<entity-one value-field="deptAndCustomer" entity-name="QzDeptAndCustomer">
				<field-map field-name="customerId" from-field="customerId"/>
				<field-map field-name="deptId" from-field="parameters.deptId"/>
			</entity-one>
				
			
<!-- 			先查询所在部门参加了多少个赛事 -->
				<entity-and list="competiAndDeptList" entity-name="QzCompetiAndDept">
					<field-map field-name="deptId" from-field="parameters.deptId"/>
				</entity-and>
				<iterate entry="competiAndDept" list="competiAndDeptList">
				<!--	删除跟该赛事关联的人 -->
					<entity-and list="competiAndCustomerList" entity-name="QzCompetiAndCustomer">
						<field-map field-name="customerId" from-field="customerId"/>
						<field-map field-name="cId" from-field="competiAndDept.cId"/>
					</entity-and>
					<iterate entry="competiAndCustomer" list="competiAndCustomerList">
					<!--	删除跟该赛事关联的人的统计信息-->
						<entity-and list="statisticsList" entity-name="QzStatistics">
							<field-map field-name="customerId" from-field="customerId"/>
							<field-map field-name="deptId" from-field="parameters.deptId"/>
							<field-map field-name="cId" from-field="competiAndCustomer.cId"/>
						</entity-and>
						<if-not-empty field="statisticsList">
							<remove-list list="statisticsList"/>
						</if-not-empty>
					</iterate>
					<if-not-empty field="competiAndCustomerList">
						<remove-list list="competiAndCustomerList"/>
					</if-not-empty>
				</iterate>
				
			<if-not-empty field="deptAndCustomer">
				<remove-value value-field="deptAndCustomer"/>
			</if-not-empty>
		</iterate>
	</simple-method>
	
		<!-- 	添加团队成员 -->
	<simple-method method-name="createPersonAndDept" short-description="createPersonAndDept">
		<log level="info" message="parameters:${parameters}"></log>
		<entity-one value-field="deptAndCustomer" entity-name="QzDeptAndCustomer">
			<field-map field-name="customerId" from-field="parameters.customerId"/>
			<field-map field-name="deptId" from-field="parameters.deptId"/>
		</entity-one>
		<if-empty field="deptAndCustomer">
			<make-value value-field="deptAndCustomer" entity-name="QzDeptAndCustomer"/>
			<set field="deptAndCustomer.customerId" from-field="parameters.customerId"/>
			<set field="deptAndCustomer.deptId" from-field="parameters.deptId"/>
			<create-value value-field="deptAndCustomer"/>
		</if-empty>
		<!--查询该团队参与的赛事 -->
		<entity-and list="competiAndDeptList" entity-name="QzCompetiAndDept">
			<field-map field-name="deptId" from-field="parameters.deptId"/>
		</entity-and>
		<iterate entry="competiAndDept" list="competiAndDeptList">
			<!--赛事跟人关联 -->
			<entity-and list="qzCompetiAndCustomerList" entity-name="QzCompetiAndCustomer">
				<field-map field-name="cId" from-field="competiAndDept.cId"/>
				<field-map field-name="customerId" from-field="parameters.customerId"/>
			</entity-and>
			<if-empty field="qzCompetiAndCustomerList">
				<make-value value-field="competiAndCustomer" entity-name="QzCompetiAndCustomer" />
				<set field="competiAndCustomer.cId" from-field="competiAndDept.cId" />
				<set field="competiAndCustomer.customerId" from-field="parameters.customerId" />
				<create-value value-field="competiAndCustomer" />
			</if-empty>
		</iterate>
		<!-- 给新加入的成员计算活动积分 -->
		<entity-and list="customerList" entity-name="QzCustomer">
			<field-map field-name="partyId" from-field="parameters.customerId"/>
		</entity-and>
		<set field="customer" from-field="customerList[0]"/>
		<if-not-empty field="customer">
			<if-not-empty field="customer.cardId">
				<now-date-to-env field="nowDate"/>
				<set field="serviceMap.listIds" from-field="customer.cardId"/>
				<set field="serviceMap.earlyDate" from-field="nowDate" type="String"/>
				<set field="serviceMap.lastDate" from-field="nowDate" type="String"/>
				<call-service service-name="reportStat" in-map-name="serviceMap"></call-service>
			</if-not-empty>
		</if-not-empty>
	</simple-method>
	
	<simple-method method-name="unbundling" short-description="unbundling">
		<log level="info" message="parameters:${parameters}"></log>
		<entity-one value-field="person" entity-name="Person">
			<field-map field-name="partyId" from-field="parameters.partyId"/>
		</entity-one>
		<log level="info" message="person>>>${person}"></log>
		<if-not-empty field="person">
			<set field="person.openId" value="" set-if-null="true"/>
			<set field="person.nickname" value="" set-if-null="true"/>
			<set field="person.headimgurl" value="" set-if-null="true"/>
			<store-value value-field="person"/>
		</if-not-empty>
	</simple-method>
	
	<simple-method method-name="createUserSecurityGroup" short-description="unbundling">
		<log level="info" message="parameters:${parameters}"></log>
		<entity-and list="securityGroupList" entity-name="UserLoginSecurityGroup">
			<field-map field-name="groupId" from-field="parameters.groupId"/>
			<field-map field-name="userLoginId" from-field="parameters.userLoginId"/>
		</entity-and>
		<now-timestamp field="nowTime"/>
		<if-not-empty field="securityGroupList">
			<remove-list list="securityGroupList"/>
		</if-not-empty>
		<if-empty field="securityGroupList">
			<make-value value-field="userLoginSecurityGroup" entity-name="UserLoginSecurityGroup" />
			<set field="userLoginSecurityGroup.userLoginId" from-field="parameters.userLoginId"/>
			<set field="userLoginSecurityGroup.groupId" from-field="parameters.groupId"/>
			<set field="userLoginSecurityGroup.fromDate" from-field="nowTime"/>
			<create-value value-field="userLoginSecurityGroup"/>
		</if-empty>
	</simple-method>
	<simple-method method-name="delSecurityGroup" short-description="unbundling">
		<log level="info" message="parameters:${parameters}"></log>
		<entity-and list="securityGroupList" entity-name="UserLoginSecurityGroup">
			<field-map field-name="groupId" from-field="parameters.groupId"/>
			<field-map field-name="userLoginId" from-field="parameters.userLoginId"/>
		</entity-and>
		<if-not-empty field="securityGroupList">
			<remove-list list="securityGroupList"/>
		</if-not-empty>
	</simple-method>
	
	<simple-method method-name="getExportData" short-description="">
		<call-service service-name=""></call-service>
	</simple-method>
	
	<simple-method method-name="updateCustomerPic" short-description="updateCustomerPic">
		<entity-condition list="personList" entity-name="Person">
			<condition-expr field-name="openId" operator="not-equals"/>
		</entity-condition>
		<iterate entry="person" list="personList">
			<set field="serviceMap.openid" from-field="person.openId" />
			<call-service service-name="getUserByOpenId" in-map-name="serviceMap">
				<result-to-field result-name="nickname" />
				<result-to-field result-name="headimgurl" />
			</call-service>
			<set field="person.nickname" from-field="nickname"/>
			<set field="person.headimgurl" from-field="headimgurl"/>
			<store-value value-field="person"/>
		</iterate>
	</simple-method>
</simple-methods>
