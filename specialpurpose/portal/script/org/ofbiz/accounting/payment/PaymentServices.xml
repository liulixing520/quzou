<?xml version="1.0" encoding="UTF-8"?>
<!--
Licensed to the Apache Software Foundation (ASF) under one
or more contributor license agreements.  See the NOTICE file
distributed with this work for additional information
regarding copyright ownership.  The ASF licenses this file
to you under the Apache License, Version 2.0 (the
"License"); you may not use this file except in compliance
with the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing,
software distributed under the License is distributed on an
"AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, either express or implied.  See the License for the
specific language governing permissions and limitations
under the License.
-->
<simple-methods xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
 xsi:noNamespaceSchemaLocation="http://ofbiz.apache.org/dtds/simple-methods-v2.xsd">

 
    <simple-method method-name="createOrderPaymentGroupAndMember" short-description="creates OrderPaymentGroup and OrderPaymentGroupMembers">
        <if-empty field="parameters.fromDate">
            <now-timestamp field="parameters.fromDate"/>
        </if-empty>
        <set-service-fields service-name="createOrderPaymentGroup" map="parameters" to-map="createOrderPaymentGroupMap"/>
        <if-empty field="parameters.paymentGroupName">
            <set field="createOrderPaymentGroupMap.paymentGroupName" value="Payment Group Name"/>
        </if-empty>
        <call-service service-name="createOrderPaymentGroup" in-map-name="createOrderPaymentGroupMap">
            <result-to-field result-name="orderPaymentGroupId"/>
            <result-to-result result-name="orderPaymentGroupId"/>
        </call-service>
        <set field="createOrderPaymentGroupMemberMap.orderPaymentGroupId" from-field="orderPaymentGroupId"/>
        <set field="createOrderPaymentGroupMemberMap.fromDate" from-field="parameters.fromDate"/>
        <iterate list="parameters.orderIds" entry="orderId">
            <set field="createOrderPaymentGroupMemberMap.orderId" from-field="orderId"/>
            <call-service service-name="createOrderPaymentGroupMember" in-map-name="createOrderPaymentGroupMemberMap"/>
        </iterate>
    </simple-method>
    
    <simple-method method-name="createOrderPaymentGroupMember" short-description="Check For Outgoing/Incoming Payment And Create Payment Group Member">
        <make-value entity-name="OrderPaymentGroupMember" value-field="newOrderPaymentGroupMember"/>
        <set-pk-fields map="parameters" value-field="newOrderPaymentGroupMember"/>
        <set-nonpk-fields map="parameters" value-field="newOrderPaymentGroupMember"/>
        <if-empty field="parameters.fromDate">
            <now-timestamp field="newOrderPaymentGroupMember.fromDate"/>
        </if-empty>
        <create-value value-field="newOrderPaymentGroupMember"/>
        <check-errors/>
    </simple-method>
	<simple-method method-name="expireOrderPaymentGroupMember" short-description="expire a Payment Group Member">
        <entity-one entity-name="OrderPaymentGroupMember" value-field="orderPaymentGroupMember"/>
        <set-service-fields service-name="updateOrderPaymentGroupMember" map="orderPaymentGroupMember" to-map="updateOrderPaymentGroupMemberMap"/>
        <now-timestamp field="updateOrderPaymentGroupMemberMap.thruDate"/>
        <call-service service-name="updateOrderPaymentGroupMember" in-map-name="updateOrderPaymentGroupMemberMap"/>
    </simple-method>
    <simple-method method-name="createFinAccountLog" short-description="" login-required="false">
		
		<sequenced-id sequence-name="FinAccountLog" field="baseId"/>
		<make-value value-field="entity" entity-name="FinAccountLog"/>
		
		<set field="entity.baseId" from-field="baseId"/>
		<set-nonpk-fields value-field="entity" map="parameters"/>
		
		<create-value value-field="entity"/>
		
	</simple-method>
	
	<simple-method method-name="updateFinAccountLog" short-description="" login-required="false">
		
		<entity-one value-field="entity" entity-name="FinAccountLog">
			<field-map field-name="baseId" from-field="parameters.baseId"/>
		</entity-one>
		<set-nonpk-fields value-field="entity" map="parameters"/>
		
		<if-not-empty field="parameters.newStatusId">
			<set field="entity.statusId" from-field="parameters.newStatusId"/>
			<if-compare operator="equals" value="IM_APPROVED" field="parameters.newStatusId">
				
				<entity-and list="accountList" entity-name="FinAccount">
					<field-map field-name="ownerPartyId" from-field="entity.partyId"/>
					<field-map field-name="finAccountTypeId" value="FA_AMOUNT"/>
				</entity-and>
				<log level="info" message="===================${parameters.newStatusId}======${accountList[0].ownerPartyId}"></log>
		
				<call-service service-name="getProductStoreFromUserLogin">
					<result-to-field result-name="defaultOwnerProductStoreId" />
					<result-to-field result-name="defaultOwnerProductStore" />
				</call-service>
				
				<set field="consumeParam.finAccountId" from-field="accountList[0].finAccountId"/>
				<set field="consumeParam.ownerPartyId" from-field="accountList[0].ownerPartyId"/>
				<set field="consumeParam.productStoreId" from-field="defaultOwnerProductStoreId"/>
				<set field="consumeParam.amount" from-field="entity.amount"/>
				<set field="consumeParam.comments" from-field="entity.logDesc"/>
				<set field="consumeParam.userLogin" from-field="userLogin"/>
				
				<call-service service-name="createConsume" in-map-name="consumeParam"></call-service>
			</if-compare>
		</if-not-empty>
		
		<store-value value-field="entity"/>
		
	</simple-method>
	
	
	<simple-method method-name="removeFinAccountLog" short-description="" login-required="false">
		
		<entity-one value-field="entity" entity-name="FinAccountLog">
			<field-map field-name="baseId" from-field="parameters.baseId"/>
		</entity-one>
		
		<remove-value value-field="entity"/>
		
	</simple-method>
	
    
</simple-methods>
